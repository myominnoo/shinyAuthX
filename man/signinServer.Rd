% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/signin.R
\name{signinServer}
\alias{signinServer}
\title{\code{signin} Server module}
\usage{
signinServer(
  id,
  users_db,
  sodium_hashed = TRUE,
  signout = shiny::reactiveVal(),
  reload_on_signout = FALSE,
  cookie_logins = FALSE,
  sessionid_col,
  cookie_getter,
  cookie_setter
)
}
\arguments{
\item{id}{An ID character that corresponds with that of the server module.}

\item{users_db}{data.frame or tibble containing five columns: \code{date_created},
\code{username}, \code{password}, \code{name}, \code{email}. See \link{create_dummy_users}.}

\item{sodium_hashed}{have the passwords been hash encrypted using the \code{sodium} package? defaults to \code{TRUE}.}

\item{signout}{\link{reactive} supply the returned reactive from \link{signoutServer} here to trigger a user sign-out}

\item{reload_on_signout}{logical to force a session reload on logout? defaults to \code{FALSE}.}

\item{cookie_logins}{enable automatic logins via browser cookies?}

\item{sessionid_col}{bare (unquoted) or quoted column name containing session ids}

\item{cookie_getter}{a function that returns a data.frame with at least two columns: user and session}

\item{cookie_setter}{a function with two parameters: user and session.  The function must save these to a database.}
}
\value{
The module will return a reactive 2 element list to your main application.
First element \code{user_auth} is a boolean indicating whether there has been
a successful login or not. Second element \code{info} will be the data frame provided
to the function, filtered to the row matching the successfully logged in username.
When \code{user_auth} is FALSE \code{info} is NULL.
}
\description{
Shiny authentication module to be used with \link{signinUI}. It uses
shiny's new \link[shiny]{moduleServer} method.
}
\examples{

library(shiny)
library(shinyAuthX)

# dataframe that holds usernames, passwords and other user data
users_base <- create_dummy_users()

ui <- fluidPage(
	# add signout button UI
	div(class = "pull-right", signoutUI(id = "signout")),

  # add signin panel UI function without signup or password recovery panel
  signinUI(id = "signin", .add_forgotpw = FALSE, .add_btn_signup = FALSE),

  # setup output to show user info after signin
  verbatimTextOutput("user_data")
)

server <- function(input, output, session) {
	# Export reactive values for testing
	exportTestValues(
		auth_status = credentials()$user_auth,
		auth_info   = credentials()$info
	)

	# call the signout module with reactive trigger to hide/show
	signout_init <- signoutServer(
		id = "signout",
		active = reactive(credentials()$user_auth)
	)

  # call signin module supplying data frame,
  credentials <- signinServer(
    id = "signin",
    users_db = users_base,
    sodium_hashed = TRUE,
    reload_on_signout = FALSE,
    signout = reactive(signout_init())
  )

  output$user_data <- renderPrint({
    # use req to only render results when credentials()$user_auth is TRUE
    req(credentials()$user_auth)
    str(credentials())
  })
}

if (interactive()) shinyApp(ui = ui, server = server)
}
