% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/signout.R
\name{signoutServer}
\alias{signoutServer}
\title{\code{signout} Server module}
\usage{
signoutServer(id, active, ...)
}
\arguments{
\item{id}{An ID character that corresponds with that of the server module.}

\item{active}{\code{reactive} supply the returned \code{user_auth} boolean reactive from \link{signinServer}
here to hide/show the logout button}

\item{...}{arguments passed to \link[shinyjs]{toggle}}
}
\value{
Reactive boolean, to be supplied as the \code{signout} argument of the
\link{signinServer} module to trigger the signout process
}
\description{
Shiny authentication module to be used with \link{signoutUI}. It uses
shiny's new \link[shiny]{moduleServer} method.
}
\examples{
library(shiny)
# devtools::load_all()


# dataframe that holds usernames, passwords and other user data
users_base <- dplyr::tibble(
  date_created = Sys.time(),
  username = c("admin", "user1", "user2"),
  password = sapply(
    c("admin", "pass1", "pass2"),
    sodium::password_store
  ),
  name = c("Admin", "User One", "User Two"),
  email = c("admin@email.com", "user1@email.com", "user2@email.com")
)


ui <- fluidPage(
  # add signin panel UI function without signup or password recovery panel
  signinUI(id = "signin", .add_forgotpw = FALSE, .add_btn_signup = FALSE),
  # setup table output to show user info after signin
  verbatimTextOutput("user_table")
)

server <- function(input, output, session) {
  # call signin module supplying data frame,
  credentials <- signinServer(
    id = "signin",
    users_db = users_base,
    sodium_hashed = TRUE
  )

  output$user_table <- renderPrint({
    # use req to only render results when credentials()$user_auth is TRUE
    req(credentials()$user_auth)
    str(credentials())
  })
}

if (interactive()) shinyApp(ui = ui, server = server)
}
