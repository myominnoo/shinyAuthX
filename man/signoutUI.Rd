% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/signout.R
\name{signoutUI}
\alias{signoutUI}
\title{\code{signout} UI module}
\usage{
signoutUI(
  id,
  label = "Sign out",
  icon = NULL,
  class = "btn-danger",
  style = "color: white;"
)
}
\arguments{
\item{id}{An ID character that corresponds with that of the server module.}

\item{label}{button label}

\item{icon}{button icon}

\item{class}{bootstrap class for the button}

\item{style}{css styling for the button}
}
\value{
Shiny UI action button
}
\description{
Shiny UI module to be used with \link{signoutServer}.
}
\examples{

library(shiny)

# dataframe that holds usernames, passwords and other user data
users_base <- create_dummy_users()

ui <- fluidPage(
  # add signin panel UI function without signup or password recovery panel
  signinUI(id = "signin", .add_forgotpw = FALSE, .add_btn_signup = FALSE),
  # setup table output to show user info after signin
  verbatimTextOutput("user_table")
)

server <- function(input, output, session) {
  # call signin module supplying data frame,
  credentials <- signinServer(
    id = "signin",
    users_db = users_base,
    sodium_hashed = TRUE
  )

  output$user_table <- renderPrint({
    # use req to only render results when credentials()$user_auth is TRUE
    req(credentials()$user_auth)
    str(credentials())
  })
}

if (interactive()) shinyApp(ui = ui, server = server)
}
